#include <algorithm>#include <cstdio>#include <cstdlib>#include <cstring>#include <iostream>#include <string>#include <vector>using namespace std;typedef vector<string> Strings;struct Point2D {	int x, y;	Point2D(int x2, int y2) {		x = x2;		y = y2;	}};struct Word {	string s;	int r;	Word(string s2, int r2) {		s = s2;		r = r2;	}};Strings split(string s, char c) {	Strings t(0);	while (true) {		int p = s.find(c);		if (p == -1) break;		t.push_back(s.substr(0, p));		s.erase(0, p + 1);	}	t.push_back(s);	return t;}vector<Point2D> pointList;vector<Word> wordList;vector<string> sample;int rank[33] = {0};int ifYes[33];int nLetter = 0;int nTypedLetter = 0;int nErasedLetter = 0;int nDownedLetter = 0;int nWord = 0;int nTypedWord = 0;int nErasedWord = 0;int nDownedWord = 0;int nErrorWord = 0;int nSelectWrongWord = 0;int nCannotFindWord = 0;int firstTime = -1;int lastTime;int preTime = 0x3fffffff;int removedTime = 0;int dragStartTime;int dragTime = 0;int dragging = 0;double toMinute(int time) {	return time / 1000.0 / 60.0;}void work(string line) {	Strings a = split(line, ' ');	if (!a.size()) return;		int time = atoi(a[0].c_str());	if (firstTime == -1) firstTime = time;	if (time - preTime > 3 * 1000 && !dragging) removedTime += time - preTime;	preTime = time;	lastTime = time;		string op = a[1];		if (op == "sentence") {		for (int i = 0; i < sample.size(); ++i) {			nLetter += sample[i].size();			nWord += 1;			if (sample[i] != wordList[i].s) nErrorWord++;		}		sample.clear();		wordList.clear();		for (int i = 2; i < a.size(); ++i) {			sample.push_back(a[i]);		}		memset(ifYes, 0, sizeof(ifYes));	}		if (op == "click") {		pointList.push_back(Point2D(atoi(a[2].c_str()), atoi(a[3].c_str())));		nTypedLetter++;	}		if (op == "leftslip") {		if (pointList.size() > 0) {			pointList.pop_back();			nErasedLetter++;		} else {			if (wordList.size() > 0) {				if (ifYes[wordList.size() - 1]) {					rank[ wordList[wordList.size() - 1].r ]--;					ifYes[ wordList.size() - 1 ] = 0;				}				wordList.pop_back();				nErasedWord++;			}		}	}		if (op == "rightslip") {			}		if (op == "downslip") {		nDownedLetter += pointList.size();		nDownedWord++;		pointList.clear();	}		if (op == "select") {		pointList.clear();		string s = a[2];		int r = atoi(a[3].c_str());		wordList.push_back(Word(s, r));		nTypedWord++;		if (wordList.size() <= sample.size()) {			if (s != sample[wordList.size() - 1]) {				if (a.size() > 4 && a[4] == "True")					nSelectWrongWord++;				else					nCannotFindWord++;			} else {				rank[r]++;				ifYes[wordList.size() - 1] = 1;			}		}	}		if (op == "dragstart") {		dragStartTime = time;		dragging = 1;	}		if (op == "dragend") {		dragTime += time - dragStartTime;		dragging = 0;	}}int main(int argc, char **argv) {	if (argc != 2) {		printf("analyzer xxx.txt\n");		return 0;	}	freopen(argv[1], "r", stdin);		string line;	while (getline(cin, line)) work(line);	int totalTime = lastTime - firstTime;	int useTime = totalTime - removedTime;	printf("%d\tRemovedTime\n", removedTime);	work("1 sentence");		printf("%.3lf\tnErasedLetter / nTypedLetter\n",		100.0 * nErasedLetter / nTypedLetter);	printf("%.3lf\tnErasedWord / nTypedWord\n",			100.0 * nErasedWord / nTypedWord);	printf("%.3lf\tnSelectWrongWord / nTypedWord\n",	100.0 * nSelectWrongWord / nTypedWord);	printf("%.3lf\tnCannotFindWord / nTypedWord\n",		100.0 * nCannotFindWord / nTypedWord);	printf("%.3lf\tnDownedWord / nTypedWord\n",			100.0 * nDownedWord / nTypedWord);	printf("%.3lf\tnErrorWord / nWord\n",				100.0 * nErrorWord / nWord);	printf("%.3lf\tWPM\n",								nWord / toMinute(useTime));	for (int i = 1; i < 25; ++i) rank[i] += rank[i - 1];	printf("%.3lf\tTop-1\n",							100.0 * rank[0] / nWord);	printf("%.3lf\tTop-5\n",							100.0 * rank[4] / nWord);	printf("%.3lf\tTop-25\n",							100.0 * rank[24] / nWord);	printf("%.3lf\tTotal time\n",						toMinute(useTime));		return 0;}